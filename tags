!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
EXIT_MSG	pickmoji.js	/^const EXIT_MSG = '\\n\\nHappy emojing !! 👋 👋';$/;"	n
Emoji	pickmoji.js	/^const searchEmoji = (inputLine) => {$/;"	c
Input	pickmoji.js	/^  const parsedInput = parseInt(input);$/;"	c
MODES	pickmoji.js	/^const MODES = {$/;"	c
MODES	pickmoji.js	/^const MODES = {$/;"	n
Msg	pickmoji.js	/^const copiedMsg = (chosenEmoji) => `Emoji ${chosenEmoji} copied to clipboard !`$/;"	c
PICK_MSG	pickmoji.js	/^const PICK_MSG = 'Which one ❓ (Press N to search again) ';$/;"	n
Pick	pickmoji.js	/^const handlePick = (input, potentialEmojis) => {$/;"	c
Question	pickmoji.js	/^const promptQuestion = () => {$/;"	c
SEARCH_MSG	pickmoji.js	/^const SEARCH_MSG = '> Search an emoji 🔍  ';$/;"	n
STATE	pickmoji.js	/^let STATE = {$/;"	c
STATE	pickmoji.js	/^let STATE = {$/;"	n
Search	pickmoji.js	/^const handleSearch = (query) => {$/;"	c
State	pickmoji.js	/^const setState = (newState) => Object.entries(newState).forEach(([key, value]) => STATE[key] = value);$/;"	c
default	pickmoji.js	/^      default: {$/;"	o
if	pickmoji.js	/^  if (hasArg) {$/;"	f
if	pickmoji.js	/^  if (input !== 'N') {$/;"	f
if	pickmoji.js	/^  if (nbEmojis === 0) {$/;"	f
if	pickmoji.js	/^  if (nbEmojis === 1) {$/;"	f
picking	pickmoji.js	/^  picking: {$/;"	o
searching	pickmoji.js	/^  searching: {$/;"	o
switch	pickmoji.js	/^    switch (mode.type) {$/;"	f
type	pickmoji.js	/^      case MODES.picking.type: {$/;"	o
type	pickmoji.js	/^      case MODES.searching.type: {$/;"	o
